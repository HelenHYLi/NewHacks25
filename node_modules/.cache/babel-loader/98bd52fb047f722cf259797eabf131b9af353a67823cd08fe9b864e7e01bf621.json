{"ast":null,"code":"var _jsxFileName = \"/Users/helenli/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Message from \"./comp/message.js\";\nimport MessageInput from \"./comp/messageInput.js\";\nimport \"./App.css\";\nimport logo from './logo.svg'; //to change!!!\n\n//import { GoogleGenerativeAI } from \"@google/generative-ai\"; //to add!!!\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"Hello! Where would you like to go?\"\n  }]);\n  const handleSend = async text => {\n    if (!text.trim()) return;\n    const newMessage = {\n      sender: \"user\",\n      text\n    };\n    setMessages([...messages, newMessage]);\n    try {\n      const response = await fetch(\"connection to python\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          message: text\n        })\n      }); //send \n      const data = await response.json();\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: data.reply\n      }]);\n    } catch (error) {\n      console.error(error);\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: \"An error occured, please try again\"\n      }]);\n    }\n\n    //checks what the user says \n    if (text == \"hi\") {\n      setMessages(prev => [...prev, {\n        sender: \"bot\",\n        text: \"how are you doing?\"\n      }]);\n    } else {\n      // (Optional) Fake bot response\n      setTimeout(() => {\n        setMessages(prev => [...prev, {\n          sender: \"bot\",\n          text: \"Got it! You said: \" + text\n        }]);\n      }, 800);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-list\",\n      children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(Message, {\n        sender: msg.sender,\n        text: msg.text\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n      onSend: handleSend\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"C39F3s0OanGA5gENQleztA7QVbQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Message","MessageInput","logo","jsxDEV","_jsxDEV","App","_s","messages","setMessages","sender","text","handleSend","trim","newMessage","response","fetch","method","body","JSON","stringify","message","data","json","prev","reply","error","console","setTimeout","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","i","onSend","_c","$RefreshReg$"],"sources":["/Users/helenli/my-app/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Message from \"./comp/message.js\";\nimport MessageInput from \"./comp/messageInput.js\";\nimport \"./App.css\";\nimport logo from './logo.svg'; //to change!!!\n\n//import { GoogleGenerativeAI } from \"@google/generative-ai\"; //to add!!!\n\nfunction App() {\n  const [messages, setMessages] = useState([\n    { sender: \"bot\", text: \"Hello! Where would you like to go?\" }\n  ]);\n\n  const handleSend = async (text) => {\n    if (!text.trim()) return;\n\n    const newMessage = { sender: \"user\", text };\n    setMessages([...messages, newMessage]);\n\n    try { \n      const response = await fetch (\"connection to python\", {\n        method: \"POST\",\n        body: JSON.stringify({message: text}),\n      }); //send \n      const data = await response.json(); \n      setMessages((prev) => [...prev, { sender: \"bot\", text: data.reply }]);\n    } catch (error) {\n      console.error(error);\n      setMessages((prev) => [\n        ...prev,\n        { sender: \"bot\", text: \"An error occured, please try again\" },\n      ]);\n    }\n\n    //checks what the user says \n    if (text == \"hi\") {\n      setMessages((prev) => [\n        ...prev,\n        { sender: \"bot\", text: \"how are you doing?\" }\n      ])\n    } else {\n      // (Optional) Fake bot response\n      setTimeout(() => {\n        setMessages((prev) => [\n          ...prev,\n          { sender: \"bot\", text: \"Got it! You said: \" + text }\n        ]);\n      }, 800);\n    }\n  };\n\n  return ( \n    <div className=\"chat-container\">\n      \n      <div className=\"image\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </div>\n\n      <div className=\"message-list\">\n        {messages.map((msg, i) => (\n          <Message key={i} sender={msg.sender} text={msg.text} />\n        ))}\n      </div>\n\n      <MessageInput onSend={handleSend} />\n    </div>\n    \n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}